﻿@using Entities;
@using Entities.DTOs.Product;
@model ProductViewModel

@{
    Layout = "_Layout";
}

<div class="container-xxl flex-grow-1 container-p-y">
    <h4 class="py-3 mb-4">
        <span class="text-muted fw-light">Ürün Yönetimi /</span> Ürünler
    </h4>

    <!-- Basic Bootstrap Table -->

    <div class="card">
        <h5 class="card-header">Ürünler</h5>
        <div class="table-responsive text-nowrap">
            <table class="inputs" >
                <tbody>
                    <tr>
                        <td style="text-align: right;">Minimum miktar:</td>
                        <td><input type="text" id="min" name="min"></td>
                    </tr>
                    <tr>
                        <td>Maksimum miktar:</td>
                        <td><input type="text" id="max" name="max"></td>
                    </tr>
                </tbody>
            </table>
            <table class="table table-bordered" id="stockTable" width="100%" cellspacing="0">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Başlık</th>
                        <th>Açıklama</th>
                        <th>Miktar</th>
                        <th>Kategori Adı</th>
                        <th></th>
                    </tr>
                </thead>
                <tfoot>
                    <tr>
                        <th>#</th>
                        <th>Başlık</th>
                        <th>Açıklama</th>
                        <th>Miktar</th>
                        <th>Kategori Adı</th>
                        <th></th>

                    </tr>
                </tfoot>
                <tbody class="table-border-bottom-0">
                    @foreach (var item in Model.ProductList)
                    {
                        <tr name=@item.ProductId>
                            <td>@item.ProductId</td>
                            <td>@item.Title</td>
                            <td>@item.Description</td>
                            <td>@item.Quantity</td>
                            <td>@item.CategoryName</td>
                            <td>
                                <button type="button" class="btn btn-sm btn-primary" data-toggle="modal"
                                        data-target="#updateProductModal-@item.ProductId" data-url="@Url.Action("Update","Product", new { id = item.ProductId })">
                                    <span class="bi bi-pencil-square"></span>
                                </button>
                                @await Html.PartialAsync("_UpdateProductPartialView",@Model)

                                <a href="@Url.Action("Delete", "Product", new { productId = item.ProductId })" class="btn btn-sm btn-danger" asp-for="Delete">
                                    <span class="bi bi-trash"></span>
                                </a>

                            </td>
                        </tr>
                    }
                </tbody>
            </table>

          <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#addProductModal">Ekle</button>


        </div>
    </div>
</div>


@* Add Modalını açmak için *@
@await Html.PartialAsync("_ProductPartialView",@Model)


@section Scripts{
    <script>
        $(document).ready(function () {
            const minEl = document.querySelector('#min');
            const maxEl = document.querySelector('#max');

            const table = $('#stockTable').DataTable();

            // Custom range filtering function
            $.fn.dataTable.ext.search.push(
                function (settings, data, dataIndex) {
                    var min = parseInt(minEl.value, 10);
                    var max = parseInt(maxEl.value, 10);
                    var quantity = parseFloat(data[3]) || 0; // use data for the quantity column

                    if (
                        (isNaN(min) && isNaN(max)) ||
                        (isNaN(min) && quantity <= max) ||
                        (min <= quantity && isNaN(max)) ||
                        (min <= quantity && quantity <= max)
                    ) {
                        return true;
                    }

                    return false;
                }
            );

            // Changes to the inputs will trigger a redraw to update the table
            minEl.addEventListener('input', function () {
                table.draw();
            });
            maxEl.addEventListener('input', function () {
                table.draw();
            });
        });
    </script>

    
}


